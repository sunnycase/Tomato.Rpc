<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(TargetDir)$(TargetFileName)" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Tomato.Rpc.Packets
{
<# var ifaceType = typeof(Tomato.Rpc.Test.Interface.ITest); #>
<#
var builder = new PacketBuilder(ifaceType);
builder.Build();
foreach (var packetInfo in builder.PacketInfos)
{
#>
	public sealed class <#= packetInfo.ClassName #>
	{
<#
foreach(var field in packetInfo.Fields)
{
#>
		public <#= field.Type.FullName #> <#= "Arg" + field.Index #>;
<#
}
#>
	}
<#
}
#>
}

<#+

class PacketInfo
{
	public string ClassName { get; set; }
	public List<FieldInfo> Fields { get; set; }
}

class FieldInfo
{
	public Type Type { get; set; }
	public int Index { get; set; }
}

class PacketBuilder
{
	private readonly Type _serviceType;

	public List<PacketInfo> PacketInfos = new List<PacketInfo>();

    public PacketBuilder(Type serviceType)
    {
        if (!serviceType.GetTypeInfo().IsInterface)
            throw new ArgumentException("Must be a interface type.", "serviceType");
        _serviceType = serviceType;
    }

    public void Build()
    {
        foreach (var method in from m in _serviceType.GetRuntimeMethods()
                               where m.ReturnType == typeof(void)
                               select m)
        {
            DefineMethodPacketType(method);
        }
    }

    private void DefineMethodPacketType(MethodInfo method)
    {
		var fields = new List<FieldInfo>();
		var @params = method.GetParameters();
        for (int i = 0; i < @params.Length; i++)
        {
			var paramType = @params[i].ParameterType.IsByRef ? @params[i].ParameterType.GetElementType() : @params[i].ParameterType;
			fields.Add(new FieldInfo
			{
				Type = paramType,
				Index = i
			});
		}
		PacketInfos.Add(new PacketInfo
		{
			ClassName = Uri.EscapeDataString(method.ToString()).Replace("%", "_"),
			Fields = fields
		});
    }
}
#>